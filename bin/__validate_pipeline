#!/usr/bin/env python3

import yaml
import sys
import logging

logger = logging.getLogger(__name__)


def verify_git_resource(resource, item_path):
  errors = []
  # should have a source with a uri
  try:
    source_uri = resource['source']['uri']
  except KeyError:
    errors.append((item_path, 'Does not have source.uri'))

  return errors

def verify_resources(data):
  errors = []

  try:
    resources = data['resources']
  except KeyError:
    logging.info("No resources present")

  resource_types = {
    'git': verify_git_resource
  }
  path = 'resources'

  for resource_index, resource in enumerate(resources):
    item_path = f"{path}[{resource_index}]"
    try:
      resource_name = resource['name']
    except KeyError:
      errors.append((item_path, "has no name"))

    item_path = f"{path}.{resource_name}"
  
    try:
      resource_type = resource['type']
    except KeyError:
      errors.append((item_path, "has no type"))

    try:
      resource_handler = resource_types[resource_type]
    except KeyError:
      errors.append((item_path, f"{resource_type} not recognised"))
    
    errors.extend(
      resource_handler(resource, item_path)
    )
  return errors


def main():
  logging.basicConfig(level=logging.DEBUG)
  pipeline_file = sys.argv[1]
  
  logging.debug("Loading data")
  with open(pipeline_file) as fd:
    data = yaml.safe_load(fd)
  
  logging.debug("Verifying")
  errors = verify_resources(data)

  if errors:
    for error in errors:
      print(error)
    exit(1)

if __name__ == "__main__":
  main()